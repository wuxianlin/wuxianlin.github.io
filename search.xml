<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GSI/GKI 与 Android 玩机</title>
    <url>/2023/02/10/android-gsi-and-gki/</url>
    <content><![CDATA[<p>Android 新手机解锁 BootLoader 后没有刷机包可玩? 试试 GSI 和 GKI 吧!</p>
<span id="more"></span>


<h2 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h2><h3 id="Android-分区架构"><a href="#Android-分区架构" class="headerlink" title="Android 分区架构"></a>Android 分区架构</h3><p>还记得 Android 7 及以前, Android 系统的分区还很少, 如 system,cache,boot,recovery.<br>而随着 Android 架构的不断演进, Android 系统的分区不断细分.<br>system分区,因Treble项目解决Android大版本碎片化问题,拆分出vendor,并为定制化拆分出 product,system_ext等.<br>boot分区,因GKI项目解决内核碎片化问题,拆分ko等硬件文件到vendor_boot,拆分ramdisk到init_boot. </p>
<p><img src="/2023/02/10/android-gsi-and-gki/partitions-android-r.png" alt="Android R Partitions"></p>
<p><a href="https://source.android.google.cn/docs/core/architecture/partitions">Android 分区</a><br><a href="https://source.android.google.cn/docs/core/architecture/partitions/generic-boot">Android boot 分区</a></p>
<h3 id="GSI"><a href="#GSI" class="headerlink" title="GSI"></a>GSI</h3><p>Google 为解决设备厂商 Android 大版本升级慢导致的碎片化等问题, 从 Android 8 开始 启用 Treble 架构, 将 vendor 与 system 解耦, 新增 vendor 分区 存放  HAL 等设备硬件相关文件, system(含 system_ext&#x2F;product ) 存放Android系统通用的文件.<br>vendor 只 依赖 system 中对应版本的 vndk 库(Vendor Native Development Kit), 所以system 可实现独立升级.</p>
<p><img src="/2023/02/10/android-gsi-and-gki/vndk.jpg" alt="Android VNDK"></p>
<p><a href="https://developer.android.google.cn/topic/generic-system-image">GSI（generic system image）通用系统镜像</a><br><a href="https://source.android.google.cn/docs/core/architecture/vndk">VNDK</a><br><a href="https://source.android.google.cn/docs/core/architecture/vndk/snapshot-design">VNDK snapshot</a><br><a href="https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html">Here comes Treble: A modular base for Android</a></p>
<h3 id="GKI"><a href="#GKI" class="headerlink" title="GKI"></a>GKI</h3><p>类似  GSI, Google 为解决 Android 设备 Linux 内核的碎片化导致安全漏洞得不到及时修复等问题.<br>从 Android 11 + 5.4 版本 Linux 内核 开始 GKI 1.0, 确立基本架构, 新增  vendor_boot 分区存放  ko 等设备硬件相关文件, boot 分区仅存放通用内核(GKI), GKI 1.0设备只需要通过GKI测试.<br>从 Android 12 + 5.10 版本Linux 内核 开始 GKI 2.0, 出厂搭载 GKI.<br>从 Android 13 开始, boot 中的 ramdisk 进一步被拆分, 存放到新增的 init_boot 分区. </p>
<p><img src="/2023/02/10/android-gsi-and-gki/generic-kernel-image-architecture.png" alt="GKI"></p>
<p><a href="https://source.android.google.cn/docs/core/architecture/kernel/generic-kernel-image">GKI（generic kernel image）通用内核镜像</a></p>
<h2 id="如何玩-GSI"><a href="#如何玩-GSI" class="headerlink" title="如何玩 GSI"></a>如何玩 GSI</h2><p>上面已经介绍过, system 可独立升级. 那我们下载一个可以用的 system.img, 刷进system, 不就…<br>是的,就是这么简单.当然前提是设备解锁 BootLoader.</p>
<h3 id="DSU-Dynamic-System-Update"><a href="#DSU-Dynamic-System-Update" class="headerlink" title="DSU(Dynamic System Update)"></a>DSU(Dynamic System Update)</h3><p>Android 提供了 DSU(Dynamic System Update)功能,<br>进入开发者选项,点击DSU Loader,然后点希望使用的版本,系统自动下载,<br>下载\安装完成之后,下拉通知栏点击重启,即可.</p>
<h3 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h3><p>不过瘾?那就直接刷(刷机注意备份数据不用我多说吧):</p>
<ul>
<li><p>下载 system.img<br>从地址下载到包(可能需要解压)得到system.img.</p>
</li>
<li><p>重启到刷机模式<br>非super分区的设备重启到bootloader模式:<br><code>adb reboot bootloader</code><br> super分区的设备重启的fastbootd模式:<br><code>adb reboot fastboot</code></p>
</li>
<li><p>开刷:<br><code>fastboot flash system system.img</code></p>
</li>
<li><p>恢复出厂:<br><code>fastboot -w</code><br>部分设备可能异常,可以尝试进入 recovery 执行恢复出厂设置.</p>
</li>
<li><p>重启, 理论上就能开机咯.<br><code>fastboot reboot</code></p>
</li>
</ul>
<h3 id="Android-官方GSI"><a href="#Android-官方GSI" class="headerlink" title="Android 官方GSI"></a>Android 官方GSI</h3><p><a href="https://developer.android.google.cn/topic/generic-system-image/releases">GSI Release</a></p>
<p>DSU 功能对应的 GSI:<br><a href="https://dl.google.com/developers/android/gsi/gsi-src.json">https://dl.google.com/developers/android/gsi/gsi-src.json</a><br>Android 11<br><a href="https://dl.google.com/developers/android/rvc/images/gsi/gsi-dsc.json">https://dl.google.com/developers/android/rvc/images/gsi/gsi-dsc.json</a><br>Android 12<br><a href="https://dl.google.com/developers/android/sc/images/gsi/gsi-dsc.json">https://dl.google.com/developers/android/sc/images/gsi/gsi-dsc.json</a><br>Android 13<br><a href="https://dl.google.com/developers/android/tm/images/gsi/gsi-dsc.json">https://dl.google.com/developers/android/tm/images/gsi/gsi-dsc.json</a>﻿</p>
<h3 id="三方-GSI"><a href="#三方-GSI" class="headerlink" title="三方 GSI"></a>三方 GSI</h3><p>phh treble:<a href="https://github.com/phhusson/treble_experimentations/releases">下载</a> <a href="https://github.com/phhusson/treble_experimentations/wiki/Generic-System-Image-%28GSI%29-list">汇总列表</a><br>Andy Yan LineageOS GSI: <a href="https://sourceforge.net/projects/andyyan-gsi/files/">下载</a> <a href="https://forum.xda-developers.com/t/gsi-12-lineageos-19-x-gsi-a64b-64b.4358041/">帖子</a><br><a href="https://sourceforge.net/projects/nippongsi/files/">Nippon GSI</a><br><a href="https://forum.xda-developers.com/c/project-treble.7259/">Treble xda 社区</a></p>
<h3 id="GSI-移植"><a href="#GSI-移植" class="headerlink" title="GSI 移植"></a>GSI 移植</h3><p><a href="https://github.com/erfanoabdi/ErfanGSIs">Erfan’s GSIs tool</a></p>
<h4 id="移植注意事项"><a href="#移植注意事项" class="headerlink" title="移植注意事项"></a>移植注意事项</h4><ul>
<li>分区:<br>如果把product\system_ext都打包到system.img,则需要新增文件<a href="https://cs.android.com/android/platform/superproject/+/master:build/make/target/product/gsi/gsi_skip_mount.cfg">etc&#x2F;init&#x2F;config&#x2F;skip_mount.cfg</a>跳过挂载设备上的product\system_ext分区.</li>
<li>apex:<br>ro.apex.updatable属性控制挂载apex文件(true)还是直接使用apex解压的目录(false).</li>
</ul>
<h2 id="GKI-1"><a href="#GKI-1" class="headerlink" title="GKI"></a>GKI</h2><p>既然 boot 分区可以独立升级,那我们有很多玩法:<br>比如可以升级 Google 新版 GKI, 修改并编译内核,加入新功能…</p>
<h3 id="查找设备对应的内核版本"><a href="#查找设备对应的内核版本" class="headerlink" title="查找设备对应的内核版本"></a>查找设备对应的内核版本</h3><ul>
<li><p>查看内核版本<br><code>adb shell cat /proc/version</code><br>在Google官网找到对应的版本,查到版本对应的分支, 刷该分支的新版本内核试试?下载源代码编译试试?</p>
</li>
<li><p>举个例子:<br>我手上的某设备的内核版本:<br><code>Linux version 5.10.101-android12-9-00001-gf4c0e37dbcde-ab8596533 (build-user@build-host) (Android (7284624, based on r416183b) clang version 12.0.5 (https://android.googlesource.com/toolchain/llvm-project c935d99d7cf2016289302412d708641d52d2f7ee), LLD 12.0.5 (/buildbot/src/android/llvm-toolchain/out/llvm-project/lld c935d99d7cf2016289302412d708641d52d2f7ee)) #1 SMP PREEMPT Mon May 16 05:21:23 UTC 2022</code><br>是的,看到他的版本号是: <code>5.10.101-android12-9-00001-gf4c0e37dbcde-ab8596533</code><br>首先看大版本:5.10 + Android 12,进入<a href="https://source.android.google.cn/docs/core/architecture/kernel/gki-android12-5_10-release-builds">android12-5.10 Release Builds</a><br>然后我们看到我们的内核版本中间的g开头的字符串:<strong>gf4c0e37dbcde</strong>,把g(估计Google或者GKI的首字母?)去掉,得到f4c0e37dbcde.<br>然后在页面搜索,就能找到源代码和编译好的二进制.<br>如果你的内核版本中间的字符串不是g开头?那应该不是 GKI.</p>
</li>
</ul>
<h3 id="刷入方法："><a href="#刷入方法：" class="headerlink" title="刷入方法："></a>刷入方法：</h3><ul>
<li>重启到fastboot模式:<br><code>adb reboot bootloader</code></li>
<li>直接开刷:<br><code>fastboot flash boot boot-xxx.img</code></li>
<li>重启啦:<br><code>fastboot reboot</code></li>
</ul>
<h3 id="GKI-下载地址"><a href="#GKI-下载地址" class="headerlink" title="GKI 下载地址"></a>GKI 下载地址</h3><h4 id="Google-官方"><a href="#Google-官方" class="headerlink" title="Google 官方"></a>Google 官方</h4><p><a href="https://source.android.google.cn/docs/core/architecture/kernel/gki-release-builds">GKI release builds</a></p>
<h3 id="GKI注意事项"><a href="#GKI注意事项" class="headerlink" title="GKI注意事项"></a>GKI注意事项</h3><p>注意区分压缩格式,我手上的设备使用的是gz压缩.</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 逆向相关</title>
    <url>/2019/03/22/android-reverse-engineering/</url>
    <content><![CDATA[<p>当你拿到Android手机的卡刷包&#x2F;线刷包，你有没有想过解开它？当你眼前摆着一个APK&#x2F;jar&#x2F;so，你有没有想过反编译&#x2F;反汇编&#x2F;动态调试然后分析研究它？……</p>
<span id="more"></span>

<h3 id="刷机包"><a href="#刷机包" class="headerlink" title="刷机包"></a>刷机包</h3><h4 id="sparse-img-ext4-img"><a href="#sparse-img-ext4-img" class="headerlink" title="sparse img -&gt; ext4 img"></a>sparse img -&gt; ext4 img</h4><p>线刷包里面找到system.img&#x2F;vendor.img</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file system.img</span><br><span class="line">system.img: Android sparse image, version: 1.0, Total of 849920 4096-byte output blocks in 2454 input chunks.</span><br></pre></td></tr></table></figure>
<p>使用Android源码编译make simg2img得到out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;simg2img即可将Android的sparse image转为ext4的image</p>
<h4 id="super-img-super-ext4-img-system-product-vendor-ext4-img"><a href="#super-img-super-ext4-img-system-product-vendor-ext4-img" class="headerlink" title="super img -&gt; super ext4 img -&gt; system product vendor ext4 img"></a>super img -&gt; super ext4 img -&gt; system product vendor ext4 img</h4><p>预装Android 10的机型一般使用<a href="https://source.android.google.cn/devices/tech/ota/dynamic_partitions">动态分区</a><br>线刷包里面找到super.img<br>使用simg2img将super.img转为super_ext4.img<br>使用Android源码编译make lpunpack得到out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;lpunpack super_ext4.img super</p>
<h4 id="dat-ext4-img"><a href="#dat-ext4-img" class="headerlink" title="dat -&gt; ext4 img"></a>dat -&gt; ext4 img</h4><p>卡刷包中的system.new.dat.br转system.new.dat<br>brotli –decompress system.new.dat.br –output&#x3D;system.new.dat</p>
<p>卡刷包中的system.new.dat system.patch.dat system.transfer.list转ext4 img<br><a href="https://github.com/xpirt/sdat2img">https://github.com/xpirt/sdat2img</a></p>
<h4 id="payload-dump"><a href="#payload-dump" class="headerlink" title="payload dump"></a>payload dump</h4><p>AB分区卡刷包相关<br><a href="https://github.com/cyxx/extract_android_ota_payload">https://github.com/cyxx/extract_android_ota_payload</a></p>
<h3 id="odex-oat-vdex"><a href="#odex-oat-vdex" class="headerlink" title="odex&#x2F;oat&#x2F;vdex"></a>odex&#x2F;oat&#x2F;vdex</h3><p>Android &lt;&#x3D;4.4 odex to dex</p>
<p><a href="https://github.com/JesusFreke/smali/wiki/DeodexInstructions">https://github.com/JesusFreke/smali/wiki/DeodexInstructions</a><br><a href="https://bitbucket.org/JesusFreke/smali/downloads/">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>
<p>Android &lt;&#x3D;7 oat to dex</p>
<p><a href="https://github.com/testwhat/SmaliEx/releases">https://github.com/testwhat/SmaliEx/releases</a><br><a href="https://github.com/testwhat/SmaliEx">https://github.com/testwhat/SmaliEx</a><br><a href="https://github.com/JesusFreke/smali/wiki/DeodexInstructions">https://github.com/JesusFreke/smali/wiki/DeodexInstructions</a><br><a href="https://bitbucket.org/JesusFreke/smali/downloads/">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>
<p>Android 8 vdex to dex</p>
<p><a href="https://github.com/anestisb/vdexExtractor">https://github.com/anestisb/vdexExtractor</a></p>
<p>Android 9 vdex-&gt;cdex-&gt;dex</p>
<p><a href="https://github.com/anestisb/vdexExtractor">https://github.com/anestisb/vdexExtractor</a><br><a href="https://github.com/anestisb/vdexExtractor/issues/23">https://github.com/anestisb/vdexExtractor/issues/23</a><br>tools&#x2F;deodex&#x2F;run.sh -h</p>
<h3 id="dex"><a href="#dex" class="headerlink" title="dex"></a>dex</h3><h4 id="dex转smali"><a href="#dex转smali" class="headerlink" title="dex转smali"></a>dex转smali</h4><p>apktool工具 针对 apk包括dex和资源</p>
<p><a href="https://github.com/iBotPeaches/Apktool">https://github.com/iBotPeaches/Apktool</a><br><a href="https://ibotpeaches.github.io/Apktool/">https://ibotpeaches.github.io/Apktool/</a></p>
<p>baksmali、smali 针对dex</p>
<p><a href="https://github.com/JesusFreke/smali">https://github.com/JesusFreke/smali</a><br><a href="https://bitbucket.org/JesusFreke/smali/downloads/">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>
<h4 id="dex转jar-java"><a href="#dex转jar-java" class="headerlink" title="dex转jar&#x2F;java"></a>dex转jar&#x2F;java</h4><p>googe enjarify工具dex转jar</p>
<p><a href="https://github.com/google/enjarify">https://github.com/google/enjarify</a></p>
<p>dex2jar</p>
<p><a href="https://github.com/pxb1988/dex2jar">https://github.com/pxb1988/dex2jar</a><br><a href="https://github.com/pxb1988/dex2jar/releases">https://github.com/pxb1988/dex2jar/releases</a></p>
<p>结合jd-gui</p>
<p><a href="https://github.com/java-decompiler/jd-gui">https://github.com/java-decompiler/jd-gui</a><br><a href="http://jd.benow.ca/">http://jd.benow.ca/</a></p>
<p>二合一工具<br><a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a> </p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>HarmonyOS Next 应用加密 安全性分析</title>
    <url>/2024/10/19/harmonyos-next-code-protect/</url>
    <content><![CDATA[<p>HarmonyOS Next支持应用加密，本文尝试分析其安全实现. </p>
<span id="more"></span>

<h2 id="Android-加固回顾"><a href="#Android-加固回顾" class="headerlink" title="Android 加固回顾"></a>Android 加固回顾</h2><p>在我们熟悉的Android生态中，APK较容易被逆向分析，查看反编译代码. 不少应用为了所谓的“安全性”，通常采用加固&#x2F;加壳手段，尝试保护自己的代码“不被人看到”.<br>实际上，客户端程序运行在终端，一定会释放到内存中，而且APK基本不挑设备，什么模拟器、root的设备都可以运行，所以我们看到脱壳方案层出不穷，加固厂商也在不断提升加固手段，运行环境安全性检测，一代二代三代壳、VMP、Java2C，各种新的加固技术也在不断迭代.<br>也就是说，应用程序如果将自己的安全性，完全寄托在这层壳上，将是巨大的安全隐患，因为这层壳一旦被脱掉，程序将被一览无遗，，，这层壳，不过就是皇帝的新衣罢了. 而且，加固可能对应用带来崩溃、兼容性、性能等负面影响. 对于安全要求较高、纵深防御的应用来说，首先要假设的，便是客户端代码、算法完全暴露在攻击者面前，然后通过安全方案设计，提升应用安全性.<br>不过话又说回来，加固确实能提升应用程序的逆向难度，挡住不少刚入门的新手，所以，这个猫鼠游戏，还在不断进行. </p>
<h2 id="HarmonyOS-Next-应用加密"><a href="#HarmonyOS-Next-应用加密" class="headerlink" title="HarmonyOS Next 应用加密"></a>HarmonyOS Next 应用加密</h2><h3 id="官网资料"><a href="#官网资料" class="headerlink" title="官网资料"></a>官网资料</h3><p>我们从华为开发者官网，可以看到<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/code-protect-V5">应用加密</a>章节.<br>为了保护应用代码安全，保护开发者的核心资产，HarmonyOS提供了<strong>端到端</strong>的应用代码保护机制，该机制以系统安全为基础，构建内核级应用生命周期内的代码安全保护能力.<br><img src="/2024/10/19/harmonyos-next-code-protect/code-protect.png" alt="应用加密"></p>
<blockquote>
<p>开发者向应用市场提交上架申请，上传应用包后可选择是否加密.<br>选择加密的应用，在经过应用市场审核后，应用市场会对上架应用做代码加密.<br>应用在设备上安装时，安装文件落盘后仍是处于加密状态，有效的保护应用程序；<br>当应用程序启动时，通过内核加载的应用文件是加密状态，因此这些文件会在内核中按需解密执行.</p>
<p>应用加密采用标准AES加密算法，解密后的明文只存在于内存中，不会存储到设备，形成端到端的加密方案，有效的保障应用程序的安全性.</p>
<p>系统级应用加密具有如下优点：</p>
<ul>
<li>应用端到端加密，应用启动后在内核内按需解密执行.</li>
<li>系统级的解密优化，相对于传统加壳等加固方式对性能的影响更小.</li>
<li>解密密钥经过安全传输后存储在系统TEE环境中，更加安全.</li>
</ul>
<p>加密效果：<br>加密对象为应用内编译后的代码文件，覆盖.abc文件，加密前的代码文件可被反编译，加密后的代码文件不可被分析，保障应用代码防逆向分析、防破解.</p>
</blockquote>
<h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>总结下来，华为为应用提供了一套系统级的加固方案:</p>
<ul>
<li>应用可选加密.</li>
<li>覆盖.abc文件（JS&#x2F;TS&#x2F;ArkTS代码，通过方舟编译器，编译为方舟字节码，存放在abc格式的文件中；类比Android apk的Java&#x2F;Kotlin代码——&gt;dalvik字节码——&gt;dex文件）.</li>
<li>加密算法AES. </li>
<li>下载、落盘的abc文件是密文.</li>
<li>解密密钥经过安全传输，存储在TEE安全环境.</li>
<li>解密过程发生在内核(指鸿蒙&#x2F;Linux内核?还是指代方舟运行时?).</li>
<li>abc明文只存在内存中.</li>
</ul>
<p>我们可以理解为，这套方案的安全性，依赖于系统的安全性（提权可dump内存、CA可被调用）、TEE环境的安全性（存储明文密钥）.<br>由于解密能力并没有开源到OpenHarmony，目前也没有非华为设备运行HarmonyOS Next（OpenHarmony+HMS），而且华为新的设备并没有开放解锁BootLoader，因此在当前HarmonyOS Next发布初期这个节点，对应用加密逻辑的分析难度直接buff叠满.<br>而且，我个人认为，这套方案，极其依赖HarmonyOS Next的生态的封闭性：</p>
<ul>
<li>商店上架的加密应用，将和商店绑定，密钥需通过HarmonyOS Next应用商店与HarmonyOS Next的TEE环境端到端安全传输，OpenHarmony并没有开源相应能力，因此无法侧载到OpenHarmony;</li>
<li>应用如果上架到其他无加密的应用商店、或者在官网提供OpenHarmony安装包，那么HarmonyOS Next应用商店的加密将被绕过;</li>
<li>希望共享HarmonyOS Next应用生态的厂商，需接入封闭的HMS、并实现与华为终端相同的TEE、加密内核等能力.</li>
</ul>
<p>同AOSP&amp;GMS类似，接入GMS的应用无法在AOSP运行，AOSP的应用可以在GMS设备运行.<br>OpenHarmony的生态共享，也是单向的，OpenHarmony的应用，可以通过开发者签名侧载到HarmonyOS Next的设备（或上架商店安装），而接入HMS的应用、接入应用商店加密的应用，无法在OpenHarmony运行.</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="获取固件"><a href="#获取固件" class="headerlink" title="获取固件"></a>获取固件</h3><p>我们通过抓包，不难获取到HarmonyOS Next的固件包，其中主要分析update_full_base.zip这个包.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mate60 NEXT.0.0.71 beta1</span><br><span class="line">https://update.dbankcdn.com/download/data/pub_13/HWHOTA_hota_900_9/24/v3/fThYWevRQueNuU8HO4XqWw/full/filelist.xml</span><br><span class="line">https://update.dbankcdn.com/download/data/pub_13/HWHOTA_hota_900_9/24/v3/fThYWevRQueNuU8HO4XqWw/full/update_full_base.zip</span><br><span class="line"></span><br><span class="line">https://update.dbankcdn.com/download/data/pub_13/HWHOTA_hota_900_9/2d/v3/yFXbndBIQkCMcFJhLHlkXQ/full/filelist.xml</span><br><span class="line">https://update.dbankcdn.com/download/data/pub_13/HWHOTA_hota_900_9/2d/v3/yFXbndBIQkCMcFJhLHlkXQ/full/update_full_cust_BRA-AL00_all_cn.zip</span><br><span class="line"></span><br><span class="line">https://update.dbankcdn.com/download/data/pub_13/HWHOTA_hota_900_9/9a/v3/WsDTBim-Ru2ZxOcdTPJtyw/full/filelist.xml</span><br><span class="line">https://update.dbankcdn.com/download/data/pub_13/HWHOTA_hota_900_9/9a/v3/WsDTBim-Ru2ZxOcdTPJtyw/full/update_full_preload_BRA-AL00_all_cn_R8.zip</span><br></pre></td></tr></table></figure>
<p><a href="https://weibo.com/3322982490/Ou6P6D4hC">解包方法</a>也不难.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下载解包工具</span><br><span class="line">$ git clone https://gitee.com/openharmony/update_packaging_tools.git</span><br><span class="line">$ cd update_packaging_tools</span><br><span class="line">//解压下载到的zip包，update.bin文件将被解压到update_full_base目录</span><br><span class="line">$ unzip update_full_base.zip -d update_full_base</span><br><span class="line">//创建输出目录</span><br><span class="line">$ mkdir out</span><br><span class="line">//python3 venv环境，个人习惯，安装依赖包</span><br><span class="line">$ python3 -m venv venv</span><br><span class="line">$ source venv/bin/activate</span><br><span class="line">$ pip3 install xmltodict cryptography asn1crypto</span><br><span class="line">//执行解包，解包完成后，out/unpack_result_xxxxxx目录下能看到boot.img、system.img等镜像</span><br><span class="line">$ python3 build_update.py out update_full_base -unpack update.bin</span><br><span class="line">$ deactivate</span><br></pre></td></tr></table></figure>
<p>我们通过mount命令，便能看到system中的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建system目录，用于挂载</span><br><span class="line">$ mkdir system</span><br><span class="line">//挂载</span><br><span class="line">$ sudo mount -o ro,loop system.img system</span><br><span class="line">//可以看到我们要分析的应用商店目录存在多个hsp、hap</span><br><span class="line">$ ls system/system/app/AppGallery</span><br><span class="line">BackgroundTaskFramework.hsp  entry.hap             testDistributionLib.hsp</span><br><span class="line">businesslib.hsp              GlobalConfig.hsp      uiextension.hap</span><br><span class="line">commonlib.hsp                OperationManager.hsp  uilib.hsp</span><br><span class="line">DownloadInstall.hsp          ServerRequestKit.hsp</span><br><span class="line">enterpriseapp.hap            service.hap</span><br><span class="line">//拷贝完成你需要的文件，然后就可以卸载system了</span><br><span class="line">$ sudo umount system</span><br></pre></td></tr></table></figure>
<h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>我们通过对应用商店抓包，了解到一些很有意思的信息（已移除部分无用信息）：<br>按照通常理解，应用有包名、版本号等信息，而在应用商店，应用还有一个很关键的信息，叫做appoid.<br>从fetchHarmonyFiles获取下载地址的接口<code> https://store-drcn.hispace.dbankcloud.cn/hwmarket/harmony/client?method=client.fetchHarmonyFiles&amp;ts=</code>，可以拿到如下响应:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rtnCode&quot;: 0,</span><br><span class="line">  &quot;rtnDesc&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;harmonyApps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pkgName&quot;: &quot;com.tencent.wechat&quot;,</span><br><span class="line">      &quot;origionSha256&quot;: &quot;38c5d1e0731b82d9cbf641fd3d82b9470b5b4494113386be9066b54f1a3200bb&quot;,</span><br><span class="line">      &quot;versionCode&quot;: 1048614,</span><br><span class="line">      &quot;hapFiles&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filePath&quot;: &quot;&quot;,</span><br><span class="line">          &quot;packageUrl&quot;: &quot;&quot;,</span><br><span class="line">          &quot;sha256&quot;: &quot;4d960828e8da0921d8936a99e163ecdd27f41dd8669baaced840662dbbcac879&quot;,</span><br><span class="line">          &quot;fileSize&quot;: 330579568,</span><br><span class="line">          &quot;hapId&quot;: &quot;193372d2887346b7907dd80d00a62b1d&quot;,</span><br><span class="line">          &quot;fileType&quot;: 4,</span><br><span class="line">          &quot;versionCode&quot;: 1048614,</span><br><span class="line">          &quot;pkg&quot;: &quot;com.tencent.wechat&quot;,</span><br><span class="line">          &quot;featureName&quot;: &quot;entry&quot;,</span><br><span class="line">          &quot;appId&quot;: &quot;C5765880207854244859&quot;,</span><br><span class="line">          &quot;moduleType&quot;: &quot;entry&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;appoid&quot;: &quot;1e2b570768404e26be3cf5ff754db454&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个appoid将参与很重要的两个网络请求：<br>getCloudChallenge<br><code>https://store-drcn.hispace.dbankcloud.cn/hwmarket/harmony/client?method=client.getCloudChallenge&amp;ts=</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ver&quot;: &quot;1.1&quot;,</span><br><span class="line">  &quot;scene&quot;: 0,</span><br><span class="line">  &quot;apps&quot;: &quot;[&#123;\&quot;bundleName\&quot;:\&quot;com.tencent.wechat\&quot;,\&quot;versionCode\&quot;:1048614,\&quot;appoid\&quot;:\&quot;1e2b570768404e26be3cf5ff754db454\&quot;,\&quot;originSha256\&quot;:\&quot;38c5d1e0731b82d9cbf641fd3d82b9470b5b4494113386be9066b54f1a3200bb\&quot;&#125;]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拿到成功的响应，会携带cloudChallenge</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rtnCode&quot;: 0,</span><br><span class="line">  &quot;rtnDesc&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;cloudChallenges&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;bundleName&quot;: &quot;com.tencent.wechat&quot;,</span><br><span class="line">      &quot;cloudChallenge&quot;: &quot;0123456789ABCDEF0123456789ABCDEF&quot;,</span><br><span class="line">      &quot;type&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>紧接着的getNegotiationKey请求，就更有意思了，携带了上一个请求拿到的cloudChallenge，来自服务端的挑战，以及设备公钥，设备证书链，签名：<br><code>https://store-drcn.hispace.dbankcloud.cn/hwmarket/harmony/client?method=client.getNegotiationKey&amp;ts=</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ver&quot;: &quot;1.1&quot;,</span><br><span class="line">  &quot;scene&quot;: 0,</span><br><span class="line">  &quot;apps&quot;: &quot;[&#123;\&quot;bundleName\&quot;:\&quot;com.tencent.wechat\&quot;,\&quot;versionCode\&quot;:1048614,\&quot;appoid\&quot;:\&quot;1e2b570768404e26be3cf5ff754db454\&quot;,\&quot;cloudChallenge\&quot;:\&quot;0123456789ABCDEF0123456789ABCDEF\&quot;,\&quot;devicePubKey\&quot;:\&quot;==\&quot;,\&quot;signature\&quot;:\&quot;\&quot;&#125;]&quot;,</span><br><span class="line">  &quot;deviceCertChain&quot;: &quot;[\&quot;-----BEGIN CERTIFICATE-----\\n=\\n-----END CERTIFICATE-----\&quot;,\&quot;-----BEGIN CERTIFICATE-----\\n==\\n-----END CERTIFICATE-----\&quot;,\&quot;-----BEGIN CERTIFICATE-----\\n=\\n-----END CERTIFICATE-----\&quot;,\&quot;-----BEGIN CERTIFICATE-----\\n==\\n-----END CERTIFICATE-----\&quot;]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是在干什么呢？通常来说，这是服务端在挑战客户端，发起客户端的设备证明，要求客户端证明自己的合法性，才会吐一些敏感数据回客户端. 经过服务端的一系列验证，拿到如下响应:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rtnCode&quot;: 0,</span><br><span class="line">  &quot;rtnDesc&quot;: &quot;SUCCESS&quot;,</span><br><span class="line">  &quot;appSecretMetaList&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;bundleName&quot;: &quot;com.tencent.wechat&quot;,</span><br><span class="line">      &quot;versionCode&quot;: 1048614,</span><br><span class="line">      &quot;secretMetaInfo&quot;: &#123;</span><br><span class="line">        &quot;ver&quot;: 1,</span><br><span class="line">        &quot;encMessage&quot;: &quot;==&quot;,</span><br><span class="line">        &quot;cloudPubKey&quot;: &quot;==&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的appSecretMetaList、secretMetaInfo，不难猜测，这个信息是应用核心的秘密信息，而cloudPubKey，顾名思义，是服务端的公钥，那encMessage呢，自然而然，则是服务端传给客户端的核心加密数据. 根据我的猜测，可能有着服务端的签名（通过cloudPubKey验签，防篡改），以及与设备公钥关联的安全协议的加密.</p>
<p>而上述用法，实际上就是华为设备证书的设备真实性证明的标准用法，参考<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/device-attestation-intro-V5">设备真实性证明能力简介</a>.</p>
<h3 id="逆向分析应用商店"><a href="#逆向分析应用商店" class="headerlink" title="逆向分析应用商店"></a>逆向分析应用商店</h3><p>目前网络上逆向abc（方舟字节码）的工具都还不太成熟，我找到了<a href="https://github.com/Yricky/abcde">abcde</a>和基于JADX的<a href="https://github.com/ohos-decompiler/abc-decompiler">abc-decompiler</a>.<br>由于比较熟悉jadx，所以使用abc-decompiler尝试反编译应用商店.  </p>
<p>我们解压system&#x2F;app&#x2F;AppGallery&#x2F;businesslib.hsp，拿到ets&#x2F;modules.abc，拖到abc-decompiler工具中：<br>我们跟踪上面的两个请求，发现相关代码：<br>com.huawei.hmsapp.appgallery.businesslib.ets.utils.DownloadManager.keynegotiation.server.utils.StoreUtils<br><img src="/2024/10/19/harmonyos-next-code-protect/store_utils.png" alt="StoreUtils"><br>com.huawei.hmsapp.appgallery.businesslib.ets.utils.DownloadManager.keynegotiation.tasks.keyNegotiationTask<br><img src="/2024/10/19/harmonyos-next-code-protect/keynegotiation_task_1.png" alt="keyNegotiationTask"><br><img src="/2024/10/19/harmonyos-next-code-protect/keynegotiation_task_2.png" alt="keyNegotiationTask"><br>这里会调进NegotiationProxy<br>com.huawei.hmsapp.appgallery.businesslib.ets.utils.DownloadManager.keynegotiation.proxy.NegotiationProxy<br><img src="/2024/10/19/harmonyos-next-code-protect/negotiation_proxy_1.png" alt="NegotiationProxy"><br><img src="/2024/10/19/harmonyos-next-code-protect/negotiation_proxy_2.png" alt="NegotiationProxy"><br>NegotiationProxy这里面很明显是Binder进程间通信，获取”@hms:security.codeProtect”系统服务，调用对应的接口.</p>
<p>难怪，这个security.codeProtect服务属于HMS，不属于OpenHarmony. 这个服务的实现位于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//服务实现</span><br><span class="line">/system/lib64/module/hms/security/libcodeprotect_napi.z.so</span><br><span class="line">//服务的init文件，类似于Android中的init.xxx.rc</span><br><span class="line">/system/etc/init/code_protect.cfg</span><br><span class="line">//服务的属性配置文件，类似于Android中的build.prop</span><br><span class="line">/system/etc/param/code_protect.para</span><br><span class="line">//system ability配置</span><br><span class="line">/system/profile/code_protect.json</span><br><span class="line">//相关API、SDK封装的Manager</span><br><span class="line">/system/lib64/libcode_protect_mgr.z.so</span><br><span class="line">/system/lib64/libcode_protect_mgr_sdk.z.so</span><br><span class="line">//所谓CA，是与TEE中运行的TA对应的，CA在HarmonyOS侧，与TEE环境的对应TA通信</span><br><span class="line">/system/lib64/libcode_protect_ca.z.so</span><br></pre></td></tr></table></figure>

<p>从上面的分析来看，基本符合华为开发者官网的表述.<br>整个密钥的下载过程，用到基于设备证书的设备真实性证明，提供基础的设备安全性保障.<br>从服务端与APP通信，APP调用hms的security.codeProtect的API，通过binder Proxy，调用到codeprotect的service，再到codeprotect的ca，codeprotect的ta，由此，服务端与TEE建立端到端的安全通信链路.</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>本文通过常规的技术手段对HarmonyOS进行安全性分析，仅为纯技术探讨，目前的分析也无实质性进展，如果有侵犯您的权益，请联系删除.<br>希望上面的内容能帮助感兴趣的同学，并且可以开展进一步的安全性分析，欢迎一起进行安全技术探讨.  </p>
]]></content>
      <categories>
        <category>HarmonyOS</category>
      </categories>
      <tags>
        <tag>harmonyos</tag>
        <tag>code-protect</tag>
      </tags>
  </entry>
  <entry>
    <title>本站介绍</title>
    <url>/2018/08/08/hello-world/</url>
    <content><![CDATA[<p>本站为 wuxianlin 个人网站，有意见欢迎来提，有问题欢迎来问，更欢迎志同道合的朋友一起交流.</p>
<span id="more"></span>

<h2 id="你知道吗"><a href="#你知道吗" class="headerlink" title="你知道吗"></a>你知道吗</h2><h3 id="资源转移"><a href="#资源转移" class="headerlink" title="资源转移"></a>资源转移</h3><p>你以前来这里查找玩机资源，现在转移到<a href="/android">玩机页面</a>了.</p>
<h3 id="百度云"><a href="#百度云" class="headerlink" title="百度云"></a>百度云</h3><p>你以前通过<a href="http://dwz.cn/wudashen">百度云共享</a>关注最新玩机资源，现在需要关注百度云后在 APP 端查看动态.</p>
<h2 id="聊一聊"><a href="#聊一聊" class="headerlink" title="聊一聊"></a>聊一聊</h2><h3 id="我"><a href="#我" class="headerlink" title="我"></a>我</h3><p>玩手机玩平板，玩电视广播机顶盒，玩卫星有线无线，玩视频音乐，，，<br>刷微博不刷朋友圈，玩小游戏不玩大游戏，打小球不打大球，会写代码不会写作文，会数学物理不会语文英语，看电视剧不看小说，，，<br>关注 科技，，， 关注 Android 尤其是 root ，，，关注 OPPO(OnePlus&#x2F;Realme) ，，，</p>
<h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p><a href="https://weibo.com/wuxianlin000000">wuxianlin Weibo</a><br><a href="https://github.com/wuxianlin">wuxianlin GitHub</a></p>
]]></content>
      <categories>
        <category>闲聊</category>
      </categories>
      <tags>
        <tag>闲聊</tag>
        <tag>介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenHarmony 5.0 qemu 编译记录</title>
    <url>/2024/10/19/openharmony5-qemu-build/</url>
    <content><![CDATA[<p>HarmonyOS Next(Based on OpenHarmony)公测了，微信、QQ也都适配了，打算研究研究OpenHarmony，先下份代码，编译qemu镜像玩玩，没想到居然有坑，记录一下，供参考.</p>
<span id="more"></span>

<p>整体参考OpenHarmony的<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/quick-start/Readme-CN.md">快速入门</a>文档.<br>从官方文档看到，OpenHarmony编译，支持IDE环境、也支持命令行环境，支持Ubuntu、也支持Windows. 由于习惯使用Ubuntu和命令行，我先尝试基于Ubuntu系统、使用命令行编译.</p>
<h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><h3 id="下载repo"><a href="#下载repo" class="headerlink" title="下载repo"></a>下载repo</h3><p>玩过AOSP源码的同学，对repo工具应该不陌生. repo（<a href="https://source.android.google.cn/docs/setup/download/source-control-tools">源代码控制工具</a>,<a href="https://source.android.google.cn/docs/setup/reference/repo">Repo 命令参考资料</a>,<a href="https://github.com/aosp-mirror/tools_repo">repo源代码</a>）是Android为了方便管理多个git库而开发的Python脚本.</p>
<p>参考OpenHarmony的<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/quick-start/quickstart-pkg-sourcecode.md">获取源码</a>文档，我们需要安装git、git-lfs，配置git，下载repo工具，并加入PATH环境变量，这一步完成，我们就可以使用repo工具了.</p>
<h3 id="使用repo下载代码"><a href="#使用repo下载代码" class="headerlink" title="使用repo下载代码"></a>使用repo下载代码</h3><p>我希望同步openharmony-5.0的代码，所以使用如下命令：<br>本地创建新的目录，用于存放源代码.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ~/openharmony-5.0</span><br><span class="line">cd ~/openharmony-5.0</span><br></pre></td></tr></table></figure>
<p>开始下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo init -u https://gitee.com/openharmony/manifest.git -b OpenHarmony-5.0.1-Release --no-repo-verify</span><br><span class="line">repo sync -c</span><br><span class="line">repo forall -c &#x27;git lfs pull&#x27;</span><br></pre></td></tr></table></figure>
<p>下载完成后，目录下能看到很多文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls ~/openharmony-5.0</span><br><span class="line">applications  build.py       device   foundation  napi_generator  qemu-run</span><br><span class="line">arkcompiler   build.sh       docs     ide         out             test</span><br><span class="line">base          commonlibrary  domains  interface   prebuilts       third_party</span><br><span class="line">build         developtools   drivers  kernel      productdefine   vendor</span><br></pre></td></tr></table></figure>
<p>然后，还需要执行prebuilts脚本，这个脚本会将一些编译工具压缩包下载到与源代码目录同级的~&#x2F;openharmony_prebuilts目录，并解压、安装到源代码目录.<br><code>bash build/prebuilts_download.sh</code></p>
<h3 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h3><p>如果repo工具使用存在问题，还可以选择下载压缩包，解压.</p>
<p>例如<a href="https://repo.huaweicloud.com/openharmony/os/5.0.0-Release/code-v5.0.0-Release.tar.gz">OpenHarmony-v5.0.0源代码压缩包</a>从<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/release-notes/OpenHarmony-v5.0.0-release.md#%E4%BB%8E%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9%E8%8E%B7%E5%8F%96">5.0发布文档</a>可以找到. 下载完成后，解压即可拿到源代码.<br><code>tar -xzf code-v5.0.0-Release.tar.gz</code></p>
<h2 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h2><h3 id="手动配置环境"><a href="#手动配置环境" class="headerlink" title="手动配置环境"></a>手动配置环境</h3><p>参考<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/quick-start/quickstart-pkg-prepare.md">准备开发环境</a>，<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/quick-start/quickstart-pkg-install-package.md">安装库和工具集</a>，安装相关工具.</p>
<h3 id="Docker环境"><a href="#Docker环境" class="headerlink" title="Docker环境"></a>Docker环境</h3><p>OpenHarmony为开发者提供了Docker环境，以帮助开发者快速完成复杂的开发环境准备工作，很适合我们这种洁癖患者.<br>参考<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/get-code/gettools-acquire.md">Docker编译环境</a><br>安装docker<br><code>sudo apt install docker.io</code><br>获取docker镜像<br><code>docker pull swr.cn-south-1.myhuaweicloud.com/openharmony-docker/docker_oh_standard:3.2</code><br>进入docker构建环境<br><code>docker run -it -v $(pwd):/home/openharmony swr.cn-south-1.myhuaweicloud.com/openharmony-docker/docker_oh_standard:3.2</code></p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>我们尝试构建qemu的镜像，qemu的<a href="https://gitee.com/openharmony/device_qemu">device</a>和<a href="https://gitee.com/openharmony/vendor_ohemu">vendor</a>已经跟随源代码同步到了device&#x2F;qemu和vendor&#x2F;ohemu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls device/qemu</span><br><span class="line">arm_mps2_an386  drivers   LICENSE    README_zh.md  SmartL_E802</span><br><span class="line">arm_mps3_an547  esp32     OAT.xml    riscv32_virt  x86_64_virt</span><br><span class="line">arm_virt        hardware  README.md  riscv64_virt</span><br><span class="line">$ ls vendor/ohemu</span><br><span class="line">common                      qemu_mini_system_demo</span><br><span class="line">LICENSE                     qemu_riscv32_mini_system_demo</span><br><span class="line">OAT.xml                     qemu_riscv64_linux_min</span><br><span class="line">qemu_arm64_linux_min        qemu_small_system_demo</span><br><span class="line">qemu_arm_linux_headless     qemu_x86_64_linux_min</span><br><span class="line">qemu_arm_linux_min          qemu_xtensa_mini_system_demo</span><br><span class="line">qemu_ca7_mini_system_demo   README.md</span><br><span class="line">qemu_cm55_mini_system_demo  README_zh.md</span><br><span class="line">qemu_csky_mini_system_demo</span><br></pre></td></tr></table></figure>

<h3 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h3><p>尝试构建x86_64架构的qemu镜像，参考<a href="https://gitee.com/openharmony/device_qemu/tree/OpenHarmony-5.0.0-Release/x86_64_virt/linux">README</a><br>执行build.sh脚本即可开始构建.<br><code>./build.sh --product-name qemu-x86_64-linux-min --ccache --jobs 4</code></p>
<h3 id="编译报错解决"><a href="#编译报错解决" class="headerlink" title="编译报错解决"></a>编译报错解决</h3><p>不知道是我的问题，还是OpenHarmony的源代码问题，关键我下载的是Release分支的代码，居然编译报错，，，没办法，只能想办法解决.</p>
<h4 id="subsystem-name-config-incorrect"><a href="#subsystem-name-config-incorrect" class="headerlink" title="subsystem name config incorrect"></a>subsystem name config incorrect</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[OHOS ERROR] Traceback (most recent call last):</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/containers/status.py&quot;, line 47, in wrapper</span><br><span class="line">[OHOS ERROR]     return func(*args, **kwargs)</span><br><span class="line">[OHOS ERROR]            ^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/ohos_build_module.py&quot;, line 67, in run</span><br><span class="line">[OHOS ERROR]     raise exception</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/ohos_build_module.py&quot;, line 65, in run</span><br><span class="line">[OHOS ERROR]     super().run()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/interface/build_module_interface.py&quot;, line 70, in run</span><br><span class="line">[OHOS ERROR]     raise exception</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/interface/build_module_interface.py&quot;, line 66, in run</span><br><span class="line">[OHOS ERROR]     self._load()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/ohos_build_module.py&quot;, line 83, in _load</span><br><span class="line">[OHOS ERROR]     self.loader.run()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/services/interface/load_interface.py&quot;, line 50, in run</span><br><span class="line">[OHOS ERROR]     self.__post_init__()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/services/loader.py&quot;, line 117, in __post_init__</span><br><span class="line">[OHOS ERROR]     self.parts_config_info = load_ohos_build.get_parts_info(</span><br><span class="line">[OHOS ERROR]                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 914, in get_parts_info</span><br><span class="line">[OHOS ERROR]     _parts_variants = build_loader.parts_variants()</span><br><span class="line">[OHOS ERROR]                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 504, in parts_variants</span><br><span class="line">[OHOS ERROR]     self.parse()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 495, in parse</span><br><span class="line">[OHOS ERROR]     subsystem_config, parts_path_dict = self._merge_build_config()</span><br><span class="line">[OHOS ERROR]                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 625, in _merge_build_config</span><br><span class="line">[OHOS ERROR]     raise OHOSException(&quot;subsystem name config incorrect in &#x27;&#123;&#125;&#x27;, build file subsystem name is &#123;&#125;,&quot;</span><br><span class="line">[OHOS ERROR] exceptions.ohos_exception.OHOSException: subsystem name config incorrect in &#x27;/home/openharmony/device/qemu/x86_64_virt/linux/ohos.build&#x27;, build file subsystem name is device_x86_64_virt,configured subsystem name is device_qemu-x86_64-linux.</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Code:        2014</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Reason:      subsystem name config incorrect in &#x27;/home/openharmony/device/qemu/x86_64_virt/linux/ohos.build&#x27;, build file subsystem name is device_x86_64_virt,configured subsystem name is device_qemu-x86_64-linux.</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Error Type:  UNKNOWN ERROR TYPE</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Description: NO DESCRIPTION</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Solution:    UNKNOWN REASON</span><br><span class="line">[OHOS ERROR] </span><br></pre></td></tr></table></figure>
<p>我的解决方案是修改build&#x2F;compile_standard_whitelist.json，将报错的device&#x2F;qemu&#x2F;x86_64_virt&#x2F;linux&#x2F;ohos.build加到bundle_subsystem_error白名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         &quot;device/board/hisilicon/hispark_taurus/linux/ohos.build&quot;,</span><br><span class="line">         &quot;device/board/hisilicon/hispark_taurus/ohos.build&quot;,</span><br><span class="line">         &quot;device/qemu/arm_virt/linux/ohos.build&quot;,</span><br><span class="line">+        &quot;device/qemu/x86_64_virt/linux/ohos.build&quot;,</span><br><span class="line">         &quot;third_party/flutter/glfw/bundle.json&quot;,</span><br><span class="line">         &quot;vendor/hihope/rk3568/ohos.build&quot;,</span><br><span class="line">         &quot;vendor/hihope/ipcamera/ohos.build&quot;</span><br></pre></td></tr></table></figure>
<h4 id="find-component-failed"><a href="#find-component-failed" class="headerlink" title="find component failed"></a>find component failed</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[OHOS ERROR] Traceback (most recent call last):</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/containers/status.py&quot;, line 47, in wrapper</span><br><span class="line">[OHOS ERROR]     return func(*args, **kwargs)</span><br><span class="line">[OHOS ERROR]            ^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/ohos_build_module.py&quot;, line 65, in run</span><br><span class="line">[OHOS ERROR]     super().run()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/interface/build_module_interface.py&quot;, line 66, in run</span><br><span class="line">[OHOS ERROR]     self._load()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/modules/ohos_build_module.py&quot;, line 83, in _load</span><br><span class="line">[OHOS ERROR]     self.loader.run()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/services/interface/load_interface.py&quot;, line 50, in run</span><br><span class="line">[OHOS ERROR]     self.__post_init__()</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/services/loader.py&quot;, line 117, in __post_init__</span><br><span class="line">[OHOS ERROR]     self.parts_config_info = load_ohos_build.get_parts_info(</span><br><span class="line">[OHOS ERROR]                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 947, in get_parts_info</span><br><span class="line">[OHOS ERROR]     _output_parts_info(parts_config_dict,</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 765, in _output_parts_info</span><br><span class="line">[OHOS ERROR]     check_subsystem_and_component(parts_info_output_path, skip_partlist_check)</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 696, in check_subsystem_and_component</span><br><span class="line">[OHOS ERROR]     compare_subsystem_and_component(subsystem_name, components_name, subsystem_compoents_whitelist_info,</span><br><span class="line">[OHOS ERROR]   File &quot;/home/openharmony/build/hb/util/loader/load_ohos_build.py&quot;, line 662, in compare_subsystem_and_component</span><br><span class="line">[OHOS ERROR]     raise Exception(message)</span><br><span class="line">[OHOS ERROR] Exception: find component device_qemu-x86_64-linux failed, please check it in /home/openharmony/out/preloader/qemu-x86_64-linux-min/parts.json.</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Code:        0000</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Reason:      find component device_qemu-x86_64-linux failed, please check it in /home/openharmony/out/preloader/qemu-x86_64-linux-min/parts.json.</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Error Type:  UNKNOWN ERROR TYPE</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Description: NO DESCRIPTION</span><br><span class="line">[OHOS ERROR] </span><br><span class="line">[OHOS ERROR] Solution:    NO SOLUTION</span><br><span class="line">[OHOS ERROR] </span><br></pre></td></tr></table></figure>
<p>聪明的你应该能看到很明显报错的堆栈中看到了subsystem_compoents_whitelist_info，又是添加白名单，陆陆续续，有好几个白名单问题，以下是简要的报错Log：<br><code>Exception: find subsystem device_x86_64_virt failed, please check it in /home/openharmony/out/preloader/qemu-x86_64-linux-min/parts.json.</code><br><code>Exception: find component product_qemu-x86_64-linux-min failed, please check it in /home/openharmony/out/preloader/qemu-x86_64-linux-min/parts.json.</code><br>我的解决方案是，修改build&#x2F;compile_standard_whitelist.json，将找不到的device_qemu-x86_64-linux、device_x86_64_virt、product_qemu-x86_64-linux-min三个组件加到subsystem_components白名单.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     ],</span><br><span class="line">-    &quot;subsystem_components&quot;: [],</span><br><span class="line">+    &quot;subsystem_components&quot;: [</span><br><span class="line">+        &quot;device_qemu-x86_64-linux&quot;,</span><br><span class="line">+        &quot;device_x86_64_virt&quot;,</span><br><span class="line">+        &quot;product_qemu-x86_64-linux-min&quot;</span><br><span class="line">+    ],</span><br><span class="line">     &quot;gn_part_or_subsystem_error&quot;: [</span><br></pre></td></tr></table></figure>
<p>不是很理解，OpenHarmony作为一个开放的操作系统，每个device都需要额外加到白名单？</p>
<p>你以为这就完了么，还有其他报错等着你呢!</p>
<h4 id="Undefined-identifier-wifi-ffrt-enable"><a href="#Undefined-identifier-wifi-ffrt-enable" class="headerlink" title="Undefined identifier wifi_ffrt_enable"></a>Undefined identifier wifi_ffrt_enable</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR at //foundation/communication/wifi/wifi/utils/BUILD.gn:100:9: Undefined identifier</span><br><span class="line">    if (wifi_ffrt_enable) &#123;</span><br><span class="line">        ^---------------</span><br><span class="line">See //foundation/communication/wifi/wifi/frameworks/native/BUILD.gn:295:7: which caused the file to be included.</span><br><span class="line">      &quot;$WIFI_ROOT_DIR/utils:wifi_utils&quot;,</span><br><span class="line">      ^--------------------------------</span><br></pre></td></tr></table></figure>
<p>这个报错倒是不难，修改foundation&#x2F;communication&#x2F;wifi下的wifi&#x2F;wifi.gni文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff --git a/wifi/wifi.gni b/wifi/wifi.gni</span><br><span class="line">index 5cd865d..67ed62c 100644</span><br><span class="line">--- a/wifi/wifi.gni</span><br><span class="line">+++ b/wifi/wifi.gni</span><br><span class="line">@@ -31,6 +31,7 @@ declare_args() &#123;</span><br><span class="line">   wifi_feature_non_seperate_p2p = false</span><br><span class="line">   wifi_feature_non_hdf_driver = false</span><br><span class="line">   wifi_feature_with_local_random_mac = true</span><br><span class="line">+  wifi_ffrt_enable = false</span><br><span class="line">   if (defined(global_parts_info) &amp;&amp;</span><br><span class="line">       defined(global_parts_info.resourceschedule_efficiency_manager)) &#123;</span><br><span class="line">     wifi_feature_with_app_frozen = true</span><br></pre></td></tr></table></figure>
<h4 id="内核编译报错"><a href="#内核编译报错" class="headerlink" title="内核编译报错"></a>内核编译报错</h4><p>FAILED: packages&#x2F;phone&#x2F;images&#x2F;bzImage</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp/wakemain-89feb8.s: Assembler messages:</span><br><span class="line">/tmp/wakemain-89feb8.s:4: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/wakemain-89feb8.s:4: Error: file number less than one</span><br><span class="line">/tmp/wakemain-89feb8.s:5: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/wakemain-89feb8.s:64: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/wakemain-89feb8.s:282: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/wakemain-89feb8.s:283: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">clang-15: error: assembler command failed with exit code 1 (use -v to see invocation)</span><br><span class="line">make[5]: *** [/home/openharmony/out/KERNEL_OBJ/kernel/src_tmp/linux-5.10/scripts/Makefile.build:294: arch/x86/realmode/rm/wakemain.o] Error 1</span><br><span class="line">make[5]: *** Waiting for unfinished jobs....</span><br><span class="line">/tmp/video-mode-908659.s: Assembler messages:</span><br><span class="line">/tmp/video-mode-908659.s:4: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/video-mode-908659.s:4: Error: file number less than one</span><br><span class="line">/tmp/video-mode-908659.s:5: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/video-mode-908659.s:6: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/video-mode-908659.s:7: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/video-mode-908659.s:554: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">/tmp/video-mode-908659.s:621: Error: junk at end of line, first unrecognized character is `&quot;&#x27;</span><br><span class="line">clang-15: error: assembler command failed with exit code 1 (use -v to see invocation)</span><br><span class="line">make[5]: *** [/home/openharmony/out/KERNEL_OBJ/kernel/src_tmp/linux-5.10/scripts/Makefile.build:294: arch/x86/realmode/rm/video-mode.o] Error 1</span><br><span class="line">make[4]: *** [/home/openharmony/out/KERNEL_OBJ/kernel/src_tmp/linux-5.10/arch/x86/realmode/Makefile:23: arch/x86/realmode/rm/realmode.bin] Error 2</span><br><span class="line">make[4]: *** Waiting for unfinished jobs....</span><br><span class="line">make[3]: *** [/home/openharmony/out/KERNEL_OBJ/kernel/src_tmp/linux-5.10/scripts/Makefile.build:537: arch/x86/realmode] Error 2</span><br><span class="line">make[3]: *** Waiting for unfinished jobs....</span><br><span class="line">make[2]: *** [/home/openharmony/out/KERNEL_OBJ/kernel/src_tmp/linux-5.10/Makefile:1850: arch/x86] Error 2</span><br><span class="line">make[2]: *** Waiting for unfinished jobs....</span><br><span class="line">make[2]: Leaving directory &#x27;/home/openharmony/out/KERNEL_OBJ/kernel/OBJ/linux-5.10&#x27;</span><br><span class="line">make[1]: *** [Makefile:192: __sub-make] Error 2</span><br><span class="line">make[1]: Leaving directory &#x27;/home/openharmony/out/KERNEL_OBJ/kernel/src_tmp/linux-5.10&#x27;</span><br><span class="line">make: *** [kernel.mk:90: /home/openharmony/out/KERNEL_OBJ/kernel/src_tmp/linux-5.10/arch/x86_64/boot/bzImage] Error 2</span><br></pre></td></tr></table></figure>
<p>解决办法参考<a href="https://gitee.com/openharmony/device_qemu/issues/IASWW3">issue</a><br>修改kernel&#x2F;linux&#x2F;build</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff --git a/kernel.mk b/kernel.mk</span><br><span class="line">index 5cbda86..f712c38 100644</span><br><span class="line">--- a/kernel.mk</span><br><span class="line">+++ b/kernel.mk</span><br><span class="line">@@ -49,6 +49,8 @@ else ifeq ($(KERNEL_ARCH), riscv64)</span><br><span class="line"> else ifeq ($(KERNEL_ARCH), x86_64)</span><br><span class="line">     KERNEL_TARGET_TOOLCHAIN := gcc</span><br><span class="line">     KERNEL_TARGET_TOOLCHAIN_PREFIX :=</span><br><span class="line">+    KERNEL_CROSS_COMPILE += LLVM=1</span><br><span class="line">+    KERNEL_CROSS_COMPILE += LLVM_IAS=1</span><br><span class="line"> endif</span><br><span class="line"> </span><br><span class="line"> ifeq ($(DEVICE_NAME), hispark_phoenix)</span><br></pre></td></tr></table></figure>
<p>顺便，我们参考这个issue，修改一下foundation&#x2F;distributeddatamgr&#x2F;kv_store</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diff --git a/kv_store.gni b/kv_store.gni</span><br><span class="line">index 53071fb..8f68798 100644</span><br><span class="line">--- a/kv_store.gni</span><br><span class="line">+++ b/kv_store.gni</span><br><span class="line">@@ -31,7 +31,7 @@ declare_args() &#123;</span><br><span class="line">     dms_service_enable = false</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">-  if (product_name != &quot;qemu-arm-linux-min&quot;) &#123;</span><br><span class="line">+  if (device_company != &quot;qemu&quot;) &#123;</span><br><span class="line">     qemu_disable = true</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">     qemu_disable = false</span><br></pre></td></tr></table></figure>

<p>接下来的构建过程便很顺利了.</p>
<h3 id="构建成功"><a href="#构建成功" class="headerlink" title="构建成功"></a>构建成功</h3><p><code>[OHOS INFO] qemu-x86_64-linux-min build success</code><br>镜像已经打包到对应的out目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls out/qemu-x86_64-linux/packages/phone/images</span><br><span class="line">bzImage         ramdisk.img  updater.img   vendor.img</span><br><span class="line">eng_system.img  system.img   userdata.img</span><br></pre></td></tr></table></figure>
<p>按照qemu device的文档，执行脚本（需提前安装qemu-system-x86_64）即可运行构建好的镜像.<br><code>./vendor/ohemu/qemu_x86_64_linux_min/qemu_run.sh</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://gitee.com/openharmony/docs/tree/master/zh-cn/device-dev">设备开发</a></p>
]]></content>
      <categories>
        <category>openharmony</category>
      </categories>
      <tags>
        <tag>openharmony</tag>
      </tags>
  </entry>
  <entry>
    <title>OPPO Find X 解锁 BootLoader &amp; root</title>
    <url>/2018/09/22/oppo-findx-root/</url>
    <content><![CDATA[<p>OPPO 已经开放 Find X 申请解锁 BootLoader ，需要玩机的你准备好了吗？</p>
<span id="more"></span>

<h3 id="开篇三问"><a href="#开篇三问" class="headerlink" title="开篇三问"></a>开篇三问</h3><p>你知道什么是解锁 BootLoader，什么是 root 权限吗？<br>如果不知道，那建议你不要解锁 BootLoader，更不要 root.</p>
<p>你会使用 adb 和 fastboot 吗？你会使用 TWRP 吗？你会双清、卡刷等刷机操作吗？<br>如果不会，那建议你不要解锁 BootLoader，更不要 root.</p>
<p>你解锁 Bootloader &amp; root 后要做什么？<br>如果你连要做什么都不知道，奉劝你不要抱着好奇的心态进行尝试.</p>
<h3 id="重要的事情说三遍"><a href="#重要的事情说三遍" class="headerlink" title="重要的事情说三遍"></a>重要的事情说三遍</h3><p>玩机有风险，刷机需谨慎.</p>
<p>仔细阅读官方网站<a href="https://www.oppo.cn/thread-397164526-1">注意事项</a>.</p>
<p>手机不开机、数据丢失等严重后果请自负，<a href="http://www.oppo.com/cn/service/map">官方售后</a>可帮你刷回官方固件.</p>
<h3 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h3><h4 id="OPPO-帐号"><a href="#OPPO-帐号" class="headerlink" title="OPPO 帐号"></a>OPPO 帐号</h4><p>如果你没有 OPPO 账号，那马上注册一个吧,<a href="https://id.oppo.com/">https://id.oppo.com</a>.</p>
<h4 id="下载申请-APP"><a href="#下载申请-APP" class="headerlink" title="下载申请 APP"></a>下载申请 APP</h4><p>从<a href="https://www.oppo.cn/thread-397164526-1">Find X 申请解锁 BootLoader 官方网站</a>下载解锁申请 APP.<br>安装到手机.</p>
<h4 id="申请-1"><a href="#申请-1" class="headerlink" title="申请"></a>申请</h4><p>打开申请 APP，按照提示进行操作.</p>
<p>等待官方审核.</p>
<p>等待下发解锁权限.</p>
<p>下发解锁权限后，申请APP将相关信息写入系统，即可进行下面的解锁操作.</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>设置，其他设置，备份与恢复，将重要的数据进行备份，然后将内置存储 Backup 目录拷贝到电脑.<br>同时可以将非常重要的数据如联系人通话记录短信等进行云备份.<br>解锁 BootLoader 后进行自己需要的玩机操作后可自行恢复数据.</p>
<h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>设置，关于手机，连续点击版本号，提示已打开开发者选项.</p>
<p>设置，其他设置，开发者选项，打开 OEM 解锁和 USB 调试.</p>
<h4 id="adb-fastboot-命令"><a href="#adb-fastboot-命令" class="headerlink" title="adb &amp; fastboot 命令"></a>adb &amp; fastboot 命令</h4><p>下载 <a href="https://developer.android.google.cn/studio/releases/platform-tools">Android Sdk Platform-Tools</a>，我们将要使用其中的 adb &amp; fastboot 命令 <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">windows</a> <a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">linux</a> <a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">mac</a>.</p>
<p>重启进入 Fastboot 模式.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<p><img src="/2018/09/22/oppo-findx-root/find-x-bootloader-mode.jpg" alt="Find X FastBoot mode"></p>
<p>看到 DEVICE STATE ：locked，说明此时 BootLoader 处于锁定状态.</p>
<p><img src="/2018/09/22/oppo-findx-root/find-x-bootloader-locked.jpg" alt="Find X BootLoader locked"></p>
<p>开始解锁咯！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flashing unlock</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flashing unlock_critical</span><br></pre></td></tr></table></figure>

<p>询问是否解锁，确认解锁就使用音量键选择 UNLOCK THE BOOTLOADER，否则选择 DO NOT UNLOCK THE BOOTLOADER (此时后悔还来得及)，电源键确认.</p>
<p><img src="/2018/09/22/oppo-findx-root/find-x-bootloader-unlocking.jpg" alt="Find X BootLoader unlocking"></p>
<p>手机会重启进入 recovery 模式格式化 data 分区，然后自动开机.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>
<p>再次进入 Fastboot 模式，可看到 DEVICE STATE ：unlocked，说明此时 BootLoader 处于解锁状态，此时你就可以使用 fastboot flash [分区名] [文件路径]为所欲为了.</p>
<p><img src="/2018/09/22/oppo-findx-root/find-x-bootloader-unlocked.jpg" alt="Find X BootLoader unlocked"></p>
<h3 id="玩机"><a href="#玩机" class="headerlink" title="玩机"></a>玩机</h3><h4 id="刷入-TWRP"><a href="#刷入-TWRP" class="headerlink" title="刷入 TWRP"></a>刷入 TWRP</h4><p>在 FastBoot 模式.</p>
<p>将 <a href="https://pan.baidu.com/s/1Nk49xtFQBHBa5a8_qOvRIg#list/path=%2Fandroid%2F%E7%AC%AC%E4%B8%89%E6%96%B9ROM%2FOPPO%20Find%20X%2Frecovery%2Ftwrp%20recovery&page=1">twrp.img</a> 刷入 recovery 分区.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash recovery twrp.img</span><br></pre></td></tr></table></figure>
<p>音量键选择 recovery mode，按电源键确认，进入 TWRP .<br><img src="/2018/09/22/oppo-findx-root/find-x-twrp-mode.jpg" alt="Find X TWRP mode"></p>
<h4 id="TWRP相关操作"><a href="#TWRP相关操作" class="headerlink" title="TWRP相关操作"></a>TWRP相关操作</h4><p>首次进入提示是否允许修改 system,vendor，根据自己的需要进行选择.（主页-&gt;挂载-&gt;挂载系统分区只读）</p>
<p><img src="/2018/09/22/oppo-findx-root/find-x-twrp-recovery.jpg" alt="Find X TWRP mode"></p>
<p>双清：主页-&gt;清除-&gt;滑动恢复出厂设置（此项操作会清除你的 data 分区除内置存储外的文件）.</p>
<p>格式化 Data：主页-&gt;清除-&gt;格式化 Data -&gt;输入 yes （此项操作会清除你的 data 分区全部文件，含内置存储.</p>
<p>卡刷：主页-&gt;安装-&gt;浏览到自己需要的卡刷包，点击，滑动刷入.</p>
<p>备份：主页-&gt;备份-&gt;选择自己需要备份的分区-&gt;滑动备份.</p>
<p>还原：主页-&gt;还原-&gt;选择需要还原的版本-&gt;选择需要还原的分区-&gt;滑动还原.</p>
<p>高级：主页-&gt;高级-&gt;文件管理;主页-&gt;高级-&gt;终端命令行.</p>
<p>ColorOS 升级 &amp; root &amp; … ：将 ColorOS 完整卡刷包和 root 等要刷的补丁放入内置存储，直接卡刷即可，先刷 ColorOS 完整卡刷包，后刷补丁.</p>
<p>双清刷 ROM &amp; root &amp; … ：将 ColorOS 完整卡刷包和 root 等要刷的补丁放入内置存储，双清后直接卡刷即可，先刷 ColorOS 完整卡刷包，后刷补丁.</p>
<h4 id="玩机-1"><a href="#玩机-1" class="headerlink" title="玩机"></a>玩机</h4><p>将网盘中的 SuperSU 补丁放入内置存储，使用 TWRP recovery 刷入即可实现 root .</p>
<p>其他补丁也可使用相同方法刷入，实现 xposed 等玩机功能.</p>
]]></content>
      <categories>
        <category>root</category>
      </categories>
      <tags>
        <tag>OPPO</tag>
        <tag>FindX</tag>
        <tag>root</tag>
        <tag>BootLoader</tag>
      </tags>
  </entry>
  <entry>
    <title>OPPO R17 Pro 解锁 BootLoader &amp; root</title>
    <url>/2018/11/08/oppo-r17pro-root/</url>
    <content><![CDATA[<p>OPPO 已经开放 R17 Pro 申请解锁 BootLoader ，需要玩机的你准备好了吗？</p>
<span id="more"></span>

<h3 id="开篇三问"><a href="#开篇三问" class="headerlink" title="开篇三问"></a>开篇三问</h3><p>你知道什么是解锁 BootLoader，什么是 root 权限吗？<br>如果不知道，那建议你不要解锁 BootLoader，更不要 root.</p>
<p>你会使用 adb 和 fastboot 吗？你会使用 TWRP 吗？你会双清、卡刷等刷机操作吗？<br>如果不会，那建议你不要解锁 BootLoader，更不要 root.</p>
<p>你解锁 Bootloader &amp; root 后要做什么？<br>如果你连要做什么都不知道，奉劝你不要抱着好奇的心态进行尝试.</p>
<h3 id="重要的事情说三遍"><a href="#重要的事情说三遍" class="headerlink" title="重要的事情说三遍"></a>重要的事情说三遍</h3><p>玩机有风险，刷机需谨慎.</p>
<p>仔细阅读官方网站<a href="https://www.oppo.cn/thread-397164526-1">注意事项</a>.</p>
<p>手机不开机、数据丢失等严重后果请自负，<a href="http://www.oppo.com/cn/service/map">官方售后</a>可帮你刷回官方固件.</p>
<h3 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h3><h4 id="OPPO-帐号"><a href="#OPPO-帐号" class="headerlink" title="OPPO 帐号"></a>OPPO 帐号</h4><p>如果你没有 OPPO 账号，那马上注册一个吧,<a href="https://id.oppo.com/">https://id.oppo.com</a>.</p>
<h4 id="下载申请-APP"><a href="#下载申请-APP" class="headerlink" title="下载申请 APP"></a>下载申请 APP</h4><p>从<a href="https://www.oppo.cn/thread-397164526-1">R17 Pro 申请解锁 BootLoader 官方网站</a>下载解锁申请 APP.<br>安装到手机.</p>
<h4 id="申请-1"><a href="#申请-1" class="headerlink" title="申请"></a>申请</h4><p>打开申请 APP，按照提示进行操作.</p>
<p>等待官方审核.</p>
<p>等待下发解锁权限.</p>
<p>下发解锁权限后，申请APP将相关信息写入系统，即可进行下面的解锁操作.</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>设置，其他设置，备份与恢复，将重要的数据进行备份，然后将内置存储 Backup 目录拷贝到电脑.<br>同时可以将非常重要的数据如联系人通话记录短信等进行云备份.<br>解锁 BootLoader 后进行自己需要的玩机操作后可自行恢复数据.</p>
<h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>设置，关于手机，连续点击版本号，提示已打开开发者选项.</p>
<p>设置，其他设置，开发者选项，打开 OEM 解锁和 USB 调试.</p>
<h4 id="adb-fastboot-命令"><a href="#adb-fastboot-命令" class="headerlink" title="adb &amp; fastboot 命令"></a>adb &amp; fastboot 命令</h4><p>下载 <a href="https://developer.android.google.cn/studio/releases/platform-tools">Android Sdk Platform-Tools</a>，我们将要使用其中的 adb &amp; fastboot 命令 <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">windows</a> <a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">linux</a> <a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">mac</a>.</p>
<p>重启进入 Fastboot 模式.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<p>看到 DEVICE STATE ：locked，说明此时 BootLoader 处于锁定状态.</p>
<p><img src="/2018/11/08/oppo-r17pro-root/r17pro-bootloader-locked.jpg" alt="R17 Pro BootLoader locked"></p>
<p>开始解锁咯！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flashing unlock</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flashing unlock_critical</span><br></pre></td></tr></table></figure>

<p>询问是否解锁，确认解锁就使用音量键选择 UNLOCK THE BOOTLOADER，否则选择 DO NOT UNLOCK THE BOOTLOADER (此时后悔还来得及)，电源键确认.</p>
<p><img src="/2018/11/08/oppo-r17pro-root/r17pro-bootloader-unlocking.jpg" alt="R17 Pro BootLoader unlocking"></p>
<p>手机会重启进入 recovery 模式格式化 data 分区，然后自动开机.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>
<p>再次进入 Fastboot 模式，可看到 DEVICE STATE ：unlocked，说明此时 BootLoader 处于解锁状态，此时你就可以使用 fastboot flash [分区名] [文件路径]为所欲为了.</p>
<p><img src="/2018/11/08/oppo-r17pro-root/r17pro-bootloader-unlocked.jpg" alt="R17 Pro BootLoader unlocked"></p>
<h3 id="玩机"><a href="#玩机" class="headerlink" title="玩机"></a>玩机</h3><h4 id="刷入-TWRP"><a href="#刷入-TWRP" class="headerlink" title="刷入 TWRP"></a>刷入 TWRP</h4><p>在 FastBoot 模式.</p>
<p>将 <a href="https://pan.baidu.com/s/1R-7ProYUWoA8dVFQohjpOQ#list/path=%2Fandroid%2F%E7%AC%AC%E4%B8%89%E6%96%B9ROM%2FOPPO%20R17%2Frecovery-R17Pro%2Ftwrp%20recovery&page=1">twrp.img</a> 刷入 recovery 分区.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash recovery twrp.img</span><br></pre></td></tr></table></figure>
<p>音量键选择 recovery mode，按电源键确认，进入 TWRP .<br><img src="/2018/11/08/oppo-r17pro-root/r17pro-twrp-mode.jpg" alt="R17 Pro TWRP mode"></p>
<h4 id="TWRP相关操作"><a href="#TWRP相关操作" class="headerlink" title="TWRP相关操作"></a>TWRP相关操作</h4><p>首次进入提示是否允许修改 system,vendor，根据自己的需要进行选择.（主页-&gt;挂载-&gt;挂载系统分区只读）</p>
<p><img src="/2018/11/08/oppo-r17pro-root/r17pro-twrp-recovery.jpg" alt="R17 Pro TWRP mode"></p>
<p>双清：主页-&gt;清除-&gt;滑动恢复出厂设置（此项操作会清除你的 data 分区除内置存储外的文件）.</p>
<p>格式化 Data：主页-&gt;清除-&gt;格式化 Data -&gt;输入 yes （此项操作会清除你的 data 分区全部文件，含内置存储.</p>
<p>卡刷：主页-&gt;安装-&gt;浏览到自己需要的卡刷包，点击，滑动刷入.</p>
<p>备份：主页-&gt;备份-&gt;选择自己需要备份的分区-&gt;滑动备份.</p>
<p>还原：主页-&gt;还原-&gt;选择需要还原的版本-&gt;选择需要还原的分区-&gt;滑动还原.</p>
<p>高级：主页-&gt;高级-&gt;文件管理;主页-&gt;高级-&gt;终端命令行.</p>
<p>ColorOS 升级 &amp; root &amp; … ：将 ColorOS 完整卡刷包和 root 等要刷的补丁放入内置存储，直接卡刷即可，先刷 ColorOS 完整卡刷包，后刷补丁.</p>
<p>双清刷 ROM &amp; root &amp; … ：将 ColorOS 完整卡刷包和 root 等要刷的补丁放入内置存储，双清后直接卡刷即可，先刷 ColorOS 完整卡刷包，后刷补丁.</p>
<h4 id="玩机-1"><a href="#玩机-1" class="headerlink" title="玩机"></a>玩机</h4><p>将网盘中的 SuperSU 补丁放入内置存储，使用 TWRP recovery 刷入即可实现 root .</p>
<p>其他补丁也可使用相同方法刷入，实现 xposed 等玩机功能.</p>
]]></content>
      <categories>
        <category>root</category>
      </categories>
      <tags>
        <tag>OPPO</tag>
        <tag>root</tag>
        <tag>BootLoader</tag>
        <tag>R17Pro</tag>
      </tags>
  </entry>
  <entry>
    <title>HarmonyOS Next 模拟器 root</title>
    <url>/2024/10/27/root-harmonyos-next-emultor/</url>
    <content><![CDATA[<p>HarmonyOS Next(Based on OpenHarmony)公测了，微信、QQ也都适配了，我们尝试修改HarmonyOS Next模拟器，获取root权限.</p>
<span id="more"></span>

<h2 id="Android-adb-root权限回顾"><a href="#Android-adb-root权限回顾" class="headerlink" title="Android adb root权限回顾"></a>Android adb root权限回顾</h2><p>玩过Android adb root的同学，可能对如何获取adb root并不陌生，一般而言，构建userdebug、eng版本，便能直接通过adb root，获取root权限.<br>至于user版本，想要变成adb root版本，则需要修改：</p>
<ul>
<li>修改default.prop&#x2F;prop.default&#x2F;build.prop等prop文件，将ro.debuggable由0改为1，可能也需要将ro.secure和ro.adb.secure由1改为0;</li>
<li>编译userdebug版本的sepolicy，替换（增加编译su.te）.</li>
<li>可能需要编译userdebug版本的adbd，替换掉adbd;</li>
</ul>
<p>之前尝试基于Magisk来作相关修改，测试能成功获取adb root权限，<a href="https://github.com/wuxianlin/adb_root">adb root Magisk 模块</a>.<br>（待补充更多技术细节介绍……）</p>
<h2 id="获取HarmonyOS-Next模拟器的hdc-root权限"><a href="#获取HarmonyOS-Next模拟器的hdc-root权限" class="headerlink" title="获取HarmonyOS Next模拟器的hdc root权限"></a>获取HarmonyOS Next模拟器的hdc root权限</h2><h3 id="获取模拟器镜像"><a href="#获取模拟器镜像" class="headerlink" title="获取模拟器镜像"></a>获取模拟器镜像</h3><p>从官网下载IDE：<a href="https://developer.huawei.com/consumer/cn/download/deveco-studio">DevEco Studio</a>，安装后，在IDE的界面下载模拟器镜像，按照<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-emulator-faqs-V5#section172728114485">QA</a>解决相关问题，即可启动模拟器镜像.</p>
<p>模拟器镜像位于%LOCALAPPDATA%\Huawei\Sdk\system-image</p>
<h3 id="开始修改"><a href="#开始修改" class="headerlink" title="开始修改"></a>开始修改</h3><p>参考Android的adb root的修改方案，我们来修改HarmonyOS Next的模拟器的system.img.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建临时目录，用于挂载</span><br><span class="line">mkdir system</span><br><span class="line">//挂载为读写</span><br><span class="line">sudo mount -o rw,loop system.img system</span><br><span class="line">//进行各种修改，举例修改system/etc/param/ohos.para</span><br><span class="line">sudo sed -i &#x27;s/const.secure=1/const.secure=0/g&#x27; system/system/etc/param/ohos.para</span><br><span class="line">sudo sed -i &#x27;s/const.debuggable=0/const.debuggable=1/g&#x27; system/system/etc/param/ohos.para</span><br><span class="line">//修改完后，卸载</span><br><span class="line">sudo umount system</span><br></pre></td></tr></table></figure>
<p>针对5.0.0.71（Beta1）版本的system.img，我修改了如下内容：</p>
<h4 id="system-etc-param-ohos-para"><a href="#system-etc-param-ohos-para" class="headerlink" title="&#x2F;system&#x2F;etc&#x2F;param&#x2F;ohos.para"></a>&#x2F;system&#x2F;etc&#x2F;param&#x2F;ohos.para</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//修改前</span><br><span class="line">const.secure=1</span><br><span class="line">const.debuggable=0</span><br><span class="line">//修改后</span><br><span class="line">const.secure=0</span><br><span class="line">const.debuggable=1</span><br></pre></td></tr></table></figure>
<h4 id="system-etc-param-hdc-para"><a href="#system-etc-param-hdc-para" class="headerlink" title="&#x2F;system&#x2F;etc&#x2F;param&#x2F;hdc.para"></a>&#x2F;system&#x2F;etc&#x2F;param&#x2F;hdc.para</h4><p>我们参考OpenHarmony的代码，直接替换：<a href="https://gitee.com/openharmony/developtools_hdc/blob/OpenHarmony-5.0.1-Release/src/daemon/etc/hdc.para">修改前developtools&#x2F;hdc&#x2F;src&#x2F;daemon&#x2F;etc&#x2F;hdc.para</a>、<a href="https://gitee.com/openharmony/developtools_hdc/blob/OpenHarmony-5.0.1-Release/src/daemon/etc/hdc.root.para">修改后developtools&#x2F;hdc&#x2F;src&#x2F;daemon&#x2F;etc&#x2F;hdc.root.para</a>.</p>
<h4 id="system-etc-init-hdc-cfg"><a href="#system-etc-init-hdc-cfg" class="headerlink" title="&#x2F;system&#x2F;etc&#x2F;init&#x2F;hdc.cfg"></a>&#x2F;system&#x2F;etc&#x2F;init&#x2F;hdc.cfg</h4><p>我们参考OpenHarmony的代码，直接替换：<a href="https://gitee.com/openharmony/developtools_hdc/blob/OpenHarmony-5.0.1-Release/src/daemon/etc/hdcd.cfg">修改前developtools&#x2F;hdc&#x2F;src&#x2F;daemon&#x2F;etc&#x2F;hdcd.cfg</a>、<a href="https://gitee.com/openharmony/developtools_hdc/blob/OpenHarmony-5.0.1-Release/src/daemon/etc/hdcd.root.cfg">修改后developtools&#x2F;hdc&#x2F;src&#x2F;daemon&#x2F;etc&#x2F;hdcd.root.cfg</a></p>
<p>大家如果对比在两个cfg，root版本相比会发现修改了hdcd进程启动的uid和selinux domain：<br>修改前：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;uid&quot; : &quot;shell&quot;</span><br><span class="line">&quot;secon&quot; : &quot;u:r:hdcd:s0&quot;</span><br></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;uid&quot; : &quot;root&quot;</span><br><span class="line">&quot;secon&quot; : &quot;u:r:su:s0&quot;</span><br></pre></td></tr></table></figure>
<p>如果就这样启动，会提示找不到u:r:su:s0，很显然，user版本为了安全，也为了精简，不会编译su.te，从<a href="https://gitee.com/openharmony/security_selinux_adapter/blob/OpenHarmony-5.0.1-Release/sepolicy/ohos_policy/developtools/hdc/system/su.te">源代码base&#x2F;security&#x2F;selinux_adapter&#x2F;sepolicy&#x2F;ohos_policy&#x2F;developtools&#x2F;hdc&#x2F;system&#x2F;su.te</a>我们也很明显看到su.te中使用了debug_only宏.<br>但是通过修改system.img，增加su domain的定义，可能需要编译源码，有点麻烦，后面再尝试.<br>我使用如下临时方案：</p>
<ul>
<li>将hdcd.cfg的”u:r:su:s0”还原为”u:r:hdcd:s0”</li>
<li>修改u:r:sh:s0的权限，改为permissive.</li>
</ul>
<h4 id="简单修改sepolicy"><a href="#简单修改sepolicy" class="headerlink" title="简单修改sepolicy"></a>简单修改sepolicy</h4><p>我们修改system&#x2F;etc&#x2F;selinux&#x2F;sepolicy_common.cil，将sh改为permissive type.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改前</span><br><span class="line">(type sh)</span><br><span class="line">修改后</span><br><span class="line">(typepermissive sh)</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>修改前：</p>
<ul>
<li>hdc shell id，普通的shell权限（uid 2000）</li>
<li>setenforce 0，设置SELinux为Permissive失败</li>
<li>ls &#x2F;data&#x2F;，没有权限访问&#x2F;data用户数据目录<br><img src="/2024/10/27/root-harmonyos-next-emultor/normal.png" alt="normal mode"></li>
</ul>
<p>修改后：</p>
<ul>
<li>hdc shell id，root权限（uid 0）</li>
<li>setenforce 0，成功设置SELinux为Permissive</li>
<li>ls &#x2F;data&#x2F;，成功访问&#x2F;data用户数据目录<br><img src="/2024/10/27/root-harmonyos-next-emultor/root.png" alt="root mode"></li>
</ul>
<h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><p><a href="https://github.com/wuxianlin/harmonyos_next_emulator_mod">modified HarmonyOS Next Emulator</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.huawei.com/consumer/cn/download/deveco-studio">DevEco Studio</a><br><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-emulator-faqs-V5#section172728114485">DevEco Studio QA</a></p>
]]></content>
      <categories>
        <category>harmonyos</category>
      </categories>
      <tags>
        <tag>harmonyos</tag>
        <tag>root</tag>
      </tags>
  </entry>
</search>
